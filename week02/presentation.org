#+TITLE: CMPUT201W20B2 Week 2
#+PROPERTY: header-args:C             :results output :exports both :flags -std=c99 -Wall -pedantic -Werror -g 
#+PROPERTY: header-args:sh            :results output :exports both

* Week2
** Copyright Statement

If you are in CMPUT201 at UAlberta this code is released in the public
domain to you.

Otherwise it is (c) 2020 Hazel Campbell, Abram Hindle under the Apache
2 License.
*** Apache 2 Preamble
Copyright 2020 Hazel Campbell, Abram Hindle

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
** Init ORG-MODE
;; I need this for org-mode to work well

(require 'ob-sh)
;(require 'ob-shell)
(org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((C . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
(setq org-src-fontify-natively t)

** Org Template
Copy and paste this to demo C

#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** Remember how to compile?

gcc -std=c99 -Wall -pedantic -Werror -o programname programname.c

** Unary versus Binary

#+BEGIN_SRC C :exports both 
#include <stdio.h>

int main() {
    int an_int = -5; // unary
    int another_int = an_int + an_int; //binary
    printf("an_int=\t%d\n", an_int);
    printf("another_int=\t%d\n", another_int);
    ++an_int;
    another_int = -(an_int) + +(an_int); //binary and unary
    printf("another_int=\t%d\n", another_int);
    another_int = -(an_int) + -(an_int); //binary and unary
    printf("another_int=\t%d\n", another_int);
    return 0;
}
#+END_SRC

#+RESULTS:
: an_int=	-5
: another_int=	-10
: another_int=	0
: another_int=	8

** Arithmetic 

Arithmetic operators have precedence. 

#+BEGIN_SRC C :exports both
#include <stdio.h>

int main() {
    int an_int = 5;
    int another_int = an_int + an_int;
    printf("another_int=%d\n", another_int);

    another_int = an_int * an_int;
    printf("(an_int*an_int) another_int=%d\n", another_int);
    int order1 = an_int * an_int + an_int * an_int / an_int;
    int order2 = (an_int * an_int) + ((an_int * an_int) / an_int);
    int order3 = an_int * (an_int + (an_int * (an_int / (an_int))));
    if ( !((order1) == order2) ) {
        printf("order1 != order2\n");
    } else {
        printf("order1 == order2\n");
    }
    if (order1 == order3) {
        printf("order1 == order3\n");
    } else {
        printf("order1 != order3\n");
    }
    
}
#+END_SRC

#+RESULTS:
: another_int=10
: (an_int*an_int) another_int=25
: order1 == order2
: order1 != order3


** Assignments in Expressions [Hazel Example]

This is a popular feature of C that causes a lot of bugs and lot of
confusion with C.

#+BEGIN_SRC C :exports both
#include <stdio.h>

int main() {
    int an_int = 5;
    printf("an_int=%d\n", an_int);
    // We can use an assignment as an expression!
    printf("(an_int = 2)=%d\n", an_int = 2);
    printf("(an_int = 5) > 5: ");
    if ((an_int = 5) > 5) {
        printf("true\n");
    } else {
        printf("false\n");
    }
    printf("(an_int *= 3) > 5: ");
    if ((an_int *=  3) > 5) {
        printf("true\n");
    } else {
        printf("false\n");
    }
    printf("an_int is now = %d\n", an_int);
    return 0;
}
#+END_SRC

#+RESULTS:
: an_int=5
: (an_int = 2)=2
: (an_int = 5) > 5: false
: (an_int *= 3) > 5: false
: an_int is now = 1

** Order of operations from Hazel

Order of operations for l-values is from right to left

#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic"
#include <stdio.h>
#include <stdlib.h>

int main() {
    int one = 1;
    int two = 2;
    int three = one = two;     // does three == one or does three == two
    printf("one=%d\n", one);
    printf("two=%d\n", two);
    printf("three=%d\n", three);
    printf("(one++)=%d (one*=2)=%d\n", one++, one *= 2);
    one = 2;
    one *= 2;
    //one++
    int tmp = one;
    one += 1;
    printf("(one++)=%d (one*=2)=%d\n", tmp, one);

    return 0;
}
#+END_SRC

#+RESULTS:
: one=2
: two=2
: three=2
: (one++)=4 (one*=2)=5

** L-value from Hazel

#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic"
#include <stdio.h>

#define N 5

int main() {
    int an_int = 5;
    printf("an_int = 5\n");
    printf("an_int=%d\n", an_int);
    an_int = 2;
    printf("an_int = 2\n");
    printf("an_int=%d\n", an_int);
    // an_int is an "lvalue"
    // aka. left value
    // anything that can appear on the left of an assignment
    // we can also use ++ and -- with lvalues
    an_int += 20;
    printf("an_int += 20\n");
    printf("an_int=%d\n", an_int);
    printf("an_int++=%d\n", an_int++);
    printf("an_int=%d\n", an_int);
    printf("++an_int=%d\n", ++an_int);
    printf("an_int=%d\n", an_int);
    an_int *= 10;
    printf("an_int *= 10\n");
    printf("an_int=%d\n", an_int);
    printf("an_int--=%d\n", an_int--);
    printf("an_int=%d\n", an_int);
    printf("--an_int=%d\n", --an_int);
    printf("an_int=%d\n", an_int);
    // None of the following work, because they are NOT lvalues!
    // 5 = 2;
    // 5 *= 10;
    // 5++;
    // N = 2;
    // N *= 10;
    // N++;
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
an_int = 5
an_int=5
an_int = 2
an_int=2
an_int += 20
an_int=22
an_int++=22
an_int=23
++an_int=24
an_int=24
an_int *= 10
an_int=240
an_int--=240
an_int=239
--an_int=238
an_int=238
#+end_example

** Boolean Values
C has an idea of truthy values and false values.

A 0, null, or 0.0f is a false value.

Anything else is a true value. This means that all arrays and strings
are true. All characters except \0 are true. All floating point values
that are not 0.0f or -0.0f are true.

#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic" 
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    char chars[1024];
    char emptystring[1024] = "";
    if ( 0.0f ) {
        printf("0.0f is true!\n");
    } else {
        printf("0.0f is not true!\n");
    }
    if ( -0.0f ) {
        printf("-0.0f is true!\n");
    } else {
        printf("-0.0f is not true!\n");
    }
    if ( emptystring ) {
        printf("emptystring is true!\n");
    } else {
        printf("emptystring is not true!\n");
    }
    if ( chars ) {
        printf("character array is true!\n");
    } else {
        printf("character array is not true!\n");
    }
    if ( 0 ) {
        printf("0 is true!\n");
    } else {
        printf("0 is not true!\n");
    }
    if ( emptystring[0] ) {
        printf("emptystring[0] is true!\n");
    } else {
        printf("emptystring[0] is not true!\n");
    }
    char * nostringatall = NULL; 
    if ( nostringatall ) {
        printf("nostringatall is true!\n");
    } else {
        printf("nostringatall is not true!\n");
    }

    return 0;
}
#+END_SRC

#+RESULTS:
: 0.0f is not true!
: -0.0f is not true!
: emptystring is true!
: character array is true!
: 0 is not true!
: emptystring[0] is not true!
: nostringatall is not true!


** Boolean Values from Hazel

file:./bool.c

#+BEGIN_SRC sh :exports both   
   gcc -v -g -O0 -std=c99 -Wall -pedantic -o bool bool.c
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :exports both :results value drawer    
  echo 2 | ./bool
#+END_SRC

#+RESULTS:
:RESULTS:
enter a number from 0-3: a is two
(a_number < 2)=0
(a_number == 2)=1
true=1
false=0
lt_two=0
(lt_two): false
lt_two_int=0
(lt_two_int): false
(1 == true): 1
(2 == true): 0
4 < a_number < 10: true
(a_number < 2 ? 111 : 222)=222
:END:


#+BEGIN_SRC C :exports both :eval no :flags "-std=c99 -Wall -pedantic" 
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    int a_number = -1;
    printf("enter a number from 0-3: ");
    int scanf_result = scanf("%d", &a_number);
    if (scanf_result != 1) {
        printf("Error: didn't read a number!\n");
        abort();
    }
    
    if (a_number < 2) {
        printf("a less than two\n");
    } else if (a_number == 2) {
        printf("a is two\n");
    } else {
        printf("a is greater than two\n");
    }
    
    printf("(a_number < 2)=%d\n", a_number < 2);
    
    printf("(a_number == 2)=%d\n", a_number == 2);
    
    // using true and false by name: be sure to include <stdbool.h>
    printf("true=%d\n", true);
    printf("false=%d\n", false);
    
    bool lt_two = a_number < 2;
    printf("lt_two=%d\n", lt_two);
    
    printf("(lt_two): ");
    if (lt_two) {
        printf("true\n");
    } else {
        printf("false\n");
    }
    
    int lt_two_int = a_number < 2;
    printf("lt_two_int=%d\n", lt_two_int);
    
    printf("(lt_two_int): ");
    if (lt_two_int) {
        printf("true\n");
    } else {
        printf("false\n");
    }

    // NEVER do == true, because any number that's not 0 is true.
    printf("(1 == true): %d\n", 1 == true);
    printf("(2 == true): %d\n", 2 == true);
    
    
    // to fix this 4 < a && a < 10
    printf("4 < a_number < 10: ");
    if ((4 < a_number) && (a_number < 10)) {
        printf("true\n");
    } else {
        printf("false\n");
    }
    int tmp = 0;
    if (a_number < 2) {
       tmp = 111;
    } else {
       tmp = 222;
    }
    tmp = (a_number < 2 ? 111 : 222);
    a_number < 2 ? tmp = 111 : tmp = 222;
    printf("(a_number < 2 ? 111 : 222)=%d\n", tmp);
    printf("(a_number < 2 ? 111 : 222)=%d\n", (a_number < 2 ? 111 : 222));
    (a_number < 2 ? 111 :((a_number < 1)? 000 : 222));
    return 0;
}
#+END_SRC

#+RESULTS:

** Pre and Post Increment

  - x++ and ++x both eventually increment x but each does something different.

  - ++x increments x and returns x's incremented value

  - x++ returns x and then increments x's value after.

#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic"
#include <stdio.h>

int main() {
    int x = 0;
    printf("x = %d\n", x);
    printf("++x ~ %d\n", ++x);
    printf("x = %d\n", x);
    printf("x++ ~ %d\n", x++);
    printf("x = %d\n", x);
    return 0;
}
#+END_SRC

#+RESULTS:
: x = 0
: ++x ~ 1
: x = 1
: x++ ~ 1
: x = 2

*** Code for x++ and ++x 
#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic"
#include <stdio.h>

int main() {
    int x = 0;
    printf("x = %d\n", x);
    // preincrement
    // ++x;
    x = x + 1;    
    printf("++x ~ %d\n", x);
    printf("x = %d\n", x);

    // postincrement
    // x++;
    int tmp = x;
    x = x + 1;
    // note that our expression has changed from x++ to tmp because we return
    // the prior value of x and it is incremented afterwards
    printf("x++ ~ %d\n", tmp);
    printf("x = %d\n", x);
    return 0;
}
#+END_SRC

#+RESULTS:
: x = 0
: ++x ~ 1
: x = 1
: x++ ~ 1
: x = 2

file:./pre-post.c

#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic -O0 -g"
#include <stdio.h>

int main() {
    int x = 100;
    int y = x++;    
    int z = ++x;
    return y;
}
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :exports both   
   gcc -v -g -O0 -std=c99 -Wall -pedantic -o pre-post pre-post.c
#+END_SRC

#+RESULTS:

*** Objdump it!
#+BEGIN_SRC sh :exports code :results value drawer
   gcc -v -g -O0 -std=c99 -Wall -pedantic -o pre-post pre-post.c
   objdump -d -S pre-post
#+END_SRC

#+RESULTS:
:RESULTS:

pre-post:     file format elf64-x86-64


Disassembly of section .init:

00000000000004b8 <_init>:
 4b8:	48 83 ec 08          	sub    $0x8,%rsp
 4bc:	48 8b 05 25 0b 20 00 	mov    0x200b25(%rip),%rax        # 200fe8 <__gmon_start__>
 4c3:	48 85 c0             	test   %rax,%rax
 4c6:	74 02                	je     4ca <_init+0x12>
 4c8:	ff d0                	callq  *%rax
 4ca:	48 83 c4 08          	add    $0x8,%rsp
 4ce:	c3                   	retq   

Disassembly of section .plt:

00000000000004d0 <.plt>:
 4d0:	ff 35 f2 0a 20 00    	pushq  0x200af2(%rip)        # 200fc8 <_GLOBAL_OFFSET_TABLE_+0x8>
 4d6:	ff 25 f4 0a 20 00    	jmpq   *0x200af4(%rip)        # 200fd0 <_GLOBAL_OFFSET_TABLE_+0x10>
 4dc:	0f 1f 40 00          	nopl   0x0(%rax)

Disassembly of section .plt.got:

00000000000004e0 <__cxa_finalize@plt>:
 4e0:	ff 25 12 0b 20 00    	jmpq   *0x200b12(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 4e6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000004f0 <_start>:
 4f0:	31 ed                	xor    %ebp,%ebp
 4f2:	49 89 d1             	mov    %rdx,%r9
 4f5:	5e                   	pop    %rsi
 4f6:	48 89 e2             	mov    %rsp,%rdx
 4f9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
 4fd:	50                   	push   %rax
 4fe:	54                   	push   %rsp
 4ff:	4c 8d 05 8a 01 00 00 	lea    0x18a(%rip),%r8        # 690 <__libc_csu_fini>
 506:	48 8d 0d 13 01 00 00 	lea    0x113(%rip),%rcx        # 620 <__libc_csu_init>
 50d:	48 8d 3d e6 00 00 00 	lea    0xe6(%rip),%rdi        # 5fa <main>
 514:	ff 15 c6 0a 20 00    	callq  *0x200ac6(%rip)        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 51a:	f4                   	hlt    
 51b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000520 <deregister_tm_clones>:
 520:	48 8d 3d e9 0a 20 00 	lea    0x200ae9(%rip),%rdi        # 201010 <__TMC_END__>
 527:	55                   	push   %rbp
 528:	48 8d 05 e1 0a 20 00 	lea    0x200ae1(%rip),%rax        # 201010 <__TMC_END__>
 52f:	48 39 f8             	cmp    %rdi,%rax
 532:	48 89 e5             	mov    %rsp,%rbp
 535:	74 19                	je     550 <deregister_tm_clones+0x30>
 537:	48 8b 05 9a 0a 20 00 	mov    0x200a9a(%rip),%rax        # 200fd8 <_ITM_deregisterTMCloneTable>
 53e:	48 85 c0             	test   %rax,%rax
 541:	74 0d                	je     550 <deregister_tm_clones+0x30>
 543:	5d                   	pop    %rbp
 544:	ff e0                	jmpq   *%rax
 546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 54d:	00 00 00 
 550:	5d                   	pop    %rbp
 551:	c3                   	retq   
 552:	0f 1f 40 00          	nopl   0x0(%rax)
 556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 55d:	00 00 00 

0000000000000560 <register_tm_clones>:
 560:	48 8d 3d a9 0a 20 00 	lea    0x200aa9(%rip),%rdi        # 201010 <__TMC_END__>
 567:	48 8d 35 a2 0a 20 00 	lea    0x200aa2(%rip),%rsi        # 201010 <__TMC_END__>
 56e:	55                   	push   %rbp
 56f:	48 29 fe             	sub    %rdi,%rsi
 572:	48 89 e5             	mov    %rsp,%rbp
 575:	48 c1 fe 03          	sar    $0x3,%rsi
 579:	48 89 f0             	mov    %rsi,%rax
 57c:	48 c1 e8 3f          	shr    $0x3f,%rax
 580:	48 01 c6             	add    %rax,%rsi
 583:	48 d1 fe             	sar    %rsi
 586:	74 18                	je     5a0 <register_tm_clones+0x40>
 588:	48 8b 05 61 0a 20 00 	mov    0x200a61(%rip),%rax        # 200ff0 <_ITM_registerTMCloneTable>
 58f:	48 85 c0             	test   %rax,%rax
 592:	74 0c                	je     5a0 <register_tm_clones+0x40>
 594:	5d                   	pop    %rbp
 595:	ff e0                	jmpq   *%rax
 597:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 59e:	00 00 
 5a0:	5d                   	pop    %rbp
 5a1:	c3                   	retq   
 5a2:	0f 1f 40 00          	nopl   0x0(%rax)
 5a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 5ad:	00 00 00 

00000000000005b0 <__do_global_dtors_aux>:
 5b0:	80 3d 59 0a 20 00 00 	cmpb   $0x0,0x200a59(%rip)        # 201010 <__TMC_END__>
 5b7:	75 2f                	jne    5e8 <__do_global_dtors_aux+0x38>
 5b9:	48 83 3d 37 0a 20 00 	cmpq   $0x0,0x200a37(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 5c0:	00 
 5c1:	55                   	push   %rbp
 5c2:	48 89 e5             	mov    %rsp,%rbp
 5c5:	74 0c                	je     5d3 <__do_global_dtors_aux+0x23>
 5c7:	48 8b 3d 3a 0a 20 00 	mov    0x200a3a(%rip),%rdi        # 201008 <__dso_handle>
 5ce:	e8 0d ff ff ff       	callq  4e0 <__cxa_finalize@plt>
 5d3:	e8 48 ff ff ff       	callq  520 <deregister_tm_clones>
 5d8:	c6 05 31 0a 20 00 01 	movb   $0x1,0x200a31(%rip)        # 201010 <__TMC_END__>
 5df:	5d                   	pop    %rbp
 5e0:	c3                   	retq   
 5e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 5e8:	f3 c3                	repz retq 
 5ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000005f0 <frame_dummy>:
 5f0:	55                   	push   %rbp
 5f1:	48 89 e5             	mov    %rsp,%rbp
 5f4:	5d                   	pop    %rbp
 5f5:	e9 66 ff ff ff       	jmpq   560 <register_tm_clones>

00000000000005fa <main>:
#include <stdio.h>

int main() {
 5fa:	55                   	push   %rbp
 5fb:	48 89 e5             	mov    %rsp,%rbp
    int x = 100;
 5fe:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)
    int y = x++;
 605:	8b 45 f4             	mov    -0xc(%rbp),%eax
 608:	8d 50 01             	lea    0x1(%rax),%edx
 60b:	89 55 f4             	mov    %edx,-0xc(%rbp)
 60e:	89 45 f8             	mov    %eax,-0x8(%rbp)
    int z = ++x;
 611:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 615:	8b 45 f4             	mov    -0xc(%rbp),%eax
 618:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return y;
 61b:	8b 45 f8             	mov    -0x8(%rbp),%eax
}
 61e:	5d                   	pop    %rbp
 61f:	c3                   	retq   

0000000000000620 <__libc_csu_init>:
 620:	41 57                	push   %r15
 622:	41 56                	push   %r14
 624:	49 89 d7             	mov    %rdx,%r15
 627:	41 55                	push   %r13
 629:	41 54                	push   %r12
 62b:	4c 8d 25 be 07 20 00 	lea    0x2007be(%rip),%r12        # 200df0 <__frame_dummy_init_array_entry>
 632:	55                   	push   %rbp
 633:	48 8d 2d be 07 20 00 	lea    0x2007be(%rip),%rbp        # 200df8 <__init_array_end>
 63a:	53                   	push   %rbx
 63b:	41 89 fd             	mov    %edi,%r13d
 63e:	49 89 f6             	mov    %rsi,%r14
 641:	4c 29 e5             	sub    %r12,%rbp
 644:	48 83 ec 08          	sub    $0x8,%rsp
 648:	48 c1 fd 03          	sar    $0x3,%rbp
 64c:	e8 67 fe ff ff       	callq  4b8 <_init>
 651:	48 85 ed             	test   %rbp,%rbp
 654:	74 20                	je     676 <__libc_csu_init+0x56>
 656:	31 db                	xor    %ebx,%ebx
 658:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 65f:	00 
 660:	4c 89 fa             	mov    %r15,%rdx
 663:	4c 89 f6             	mov    %r14,%rsi
 666:	44 89 ef             	mov    %r13d,%edi
 669:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
 66d:	48 83 c3 01          	add    $0x1,%rbx
 671:	48 39 dd             	cmp    %rbx,%rbp
 674:	75 ea                	jne    660 <__libc_csu_init+0x40>
 676:	48 83 c4 08          	add    $0x8,%rsp
 67a:	5b                   	pop    %rbx
 67b:	5d                   	pop    %rbp
 67c:	41 5c                	pop    %r12
 67e:	41 5d                	pop    %r13
 680:	41 5e                	pop    %r14
 682:	41 5f                	pop    %r15
 684:	c3                   	retq   
 685:	90                   	nop
 686:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 68d:	00 00 00 

0000000000000690 <__libc_csu_fini>:
 690:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000000694 <_fini>:
 694:	48 83 ec 08          	sub    $0x8,%rsp
 698:	48 83 c4 08          	add    $0x8,%rsp
 69c:	c3                   	retq   
:END:


*** Objdump Main
#+BEGIN_SRC verbatim
00000000000005fa <main>:
#include <stdio.h>

int main() {
5fa:	55                   	push   %rbp             # store main on the stack
 5fb:	48 89 e5             	mov    %rsp,%rbp        # move the stackpointer to rbp
    int x = 100;                                        
 5fe:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp) # set x on the stack to 100
    int y = x++;
 605:	8b 45 f4             	mov    -0xc(%rbp),%eax  # copy x to eax
 608:	8d 50 01             	lea    0x1(%rax),%edx   # copy x+1 to edx (GCC why you abuse lea?!)
 60b:	89 55 f4             	mov    %edx,-0xc(%rbp)  # copy x+1 back to the stack as x
 60e:	89 45 f8             	mov    %eax,-0x8(%rbp)  # store old x from eax into where y is stored
    int z = ++x;
 611:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)  # add 1 to x on the stack
 615:	8b 45 f4             	mov    -0xc(%rbp),%eax  # copy x from stack to eax
 618:	89 45 fc             	mov    %eax,-0x4(%rbp)  # store it into z
    return y;
 61b:	8b 45 f8             	mov    -0x8(%rbp),%eax  # copy y into eax to return
}
 61e:	5d                   	pop    %rbp             # restore base pointer
 61f:	c3                   	retq                    # return
#+END_SRC verbatim

** Comma Operator from Hazel

#+BEGIN_SRC C :exports both :flags "-std=c99 -Wall -pedantic"
#include <stdio.h>

/* The comma operator:
 * You should never use it in your own code!
 * It evaluates the expression on the left side of the comma, and discards the result.
 * Then it evaluates the expression on the right side. The value on the right side is the value of the expression.
 */

int main() {
    int an_int;
    int array[2] = { 100, 200 };
    an_int = (1,2),3;
    printf("%d\n", an_int);
    return 0;
}
#+END_SRC

#+RESULTS:
: 2

** If statements
#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** Ternary Statements
#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** Switch Statements
#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** While loops
#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** For loops
#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:
