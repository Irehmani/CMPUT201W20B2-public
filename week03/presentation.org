#+TITLE: CMPUT201W20B2 Week 3
#+PROPERTY: header-args:C             :results output :exports both :flags -std=c99 -Wall -pedantic -Werror -g 
#+PROPERTY: header-args:sh            :results output :exports both

* Week3
** Copyright Statement

If you are in CMPUT201 at UAlberta this code is released in the public
domain to you.

Otherwise it is (c) 2020 Abram Hindle under the Apache
2 License.  Unless it is Hazel Code! Which is AGPL3.0!

*** Hazel Code is licensed under AGPL3.0+

Also found here https://github.com/hazelybell/examples/tree/C-2020-01

Hazel code is licensed: The example code is licensed under the AGPL3+ license, unless otherwise noted.

*** Apache 2 Preamble
Copyright 2020 Hazel Campbell, Abram Hindle

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
** Init ORG-MODE
;; I need this for org-mode to work well

(require 'ob-sh)
;(require 'ob-shell)
(org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((C . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
(setq org-src-fontify-natively t)

** Org Template
Copy and paste this to demo C

#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** Remember how to compile?

gcc -std=c99 -Wall -pedantic -Werror -o programname programname.c

** Types!

*** int!

In C ints are often 32-bit integers. They can have a sign.

#+BEGIN_SRC C :exports both
#include <stdio.h>
#include <limits.h>
int main() {
    int an_int = 6;
    printf("size_of(an_int) == %ld\n", sizeof(an_int));
    int max_int = INT_MAX;
    printf("max int == %11d\n", max_int);
    int min_int = INT_MIN;
    printf("min int == %11d\n", min_int);
    printf("an_int  == %11d \t== 0x%08x\n", an_int,  an_int);
    printf("min_int == %11d \t== 0x%08x\n", min_int, min_int);
    printf("max_int == %11d \t== 0x%08x\n", max_int, max_int);
    printf("     -1 == %11d \t== 0x%08x\n", -1,-1);
    printf("      1 == %11d \t== 0x%08x\n", 1,1);
    printf("      0 == %11d \t== 0x%08x\n", 0,0);

    return 0;
}
#+END_SRC

#+RESULTS:
: size_of(an_int) == 4
: max int ==  2147483647
: min int == -2147483648
: an_int  ==           6 	== 0x00000006
: min_int == -2147483648 	== 0x80000000
: max_int ==  2147483647 	== 0x7fffffff
:      -1 ==          -1 	== 0xffffffff
:       1 ==           1 	== 0x00000001
:       0 ==           0 	== 0x00000000

*** unsigned ints!

You can only non-negative integers if you want

#+BEGIN_SRC C :exports both
#include <stdio.h>
#include <limits.h>
int main() {
    unsigned int an_int = 6;
    printf("size_of(an_int) == %ld\n", sizeof(an_int));
    unsigned int max_int = UINT_MAX;
    printf("max int == %11u\n", max_int);
    unsigned int min_int = 0;
    printf("min int == %11u\n", min_int);
    printf("an_int  == %11u \t== 0x%08x\n", an_int,  an_int);
    printf("min_int == %11u \t== 0x%08x\n", min_int, min_int);
    printf("max_int == %11u \t== 0x%08x\n", max_int, max_int);
    printf("     -1 == %11u \t== 0x%08x\n", -1,-1);
    printf("      1 == %11u \t== 0x%08x\n", 1,1);
    printf("      0 == %11u \t== 0x%08x\n", 0,0);
    return 0;
}
#+END_SRC

#+RESULTS:
: size_of(an_int) == 4
: max int ==  4294967295
: min int ==           0
: an_int  ==           6 	== 0x00000006
: min_int ==           0 	== 0x00000000
: max_int ==  4294967295 	== 0xffffffff
:      -1 ==  4294967295 	== 0xffffffff
:       1 ==           1 	== 0x00000001
:       0 ==           0 	== 0x00000000

