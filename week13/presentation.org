#+TITLE: CMPUT201W20B2 Week 13
#+PROPERTY: header-args:C             :exports both :eval yes :flags -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 :eval yes :results value verbatim
#+PROPERTY: header-args:sh            :exports both :eval yes :results value verbatim
#+PROPERTY: header-args:shell         :exports both :eval yes :results value verbatim

* Week13
https://github.com/abramhindle/CMPUT201W20B2-public/tree/master/week13
** Copyright Statement

If you are in CMPUT201 at UAlberta this code is released in the public
domain to you.

Otherwise it is (c) 2020 Abram Hindle, Hazel Campbell AGPL3.0+

*** License

    CMPUT 201 C Notes
    Copyright (C) 2020 Abram Hindle, Hazel Campbell

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.


*** Hazel Code is licensed under AGPL3.0+

Hazel's code is also found here
https://github.com/hazelybell/examples/tree/C-2020-01

Hazel code is licensed: The example code is licensed under the AGPL3+
license, unless otherwise noted.

** Alternative version

Checkout the .txt, the .pdf, and the .html version

** Init ORG-MODE

#+BEGIN_SRC elisp
;; I need this for org-mode to work well
;; If we have a new org-mode use ob-shell
;; otherwise use ob-sh --- but not both!
(if (require 'ob-shell nil 'noerror)
  (progn
    (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
  (progn
    (require 'ob-sh)
    (org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))))
(org-babel-do-load-languages 'org-babel-load-languages '((C . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
(setq org-src-fontify-natively t)
(setq org-confirm-babel-evaluate nil) ;; danger!
(custom-set-faces
 '(org-block ((t (:inherit shadow :foreground "black"))))
 '(org-code ((t (:inherit shadow :foreground "black")))))
#+END_SRC

#+RESULTS:

*** Org export
#+BEGIN_SRC elisp
(org-html-export-to-html)
(org-latex-export-to-pdf)
(org-ascii-export-to-ascii)
#+END_SRC

#+RESULTS:
: presentation.txt


*** Org Template
Copy and paste this to demo C

#+BEGIN_SRC C :exports both
#include <stdio.h>

int main(int argc, char**argv) {
    return 0;
}
#+END_SRC

#+RESULTS:

** Remember how to compile?

gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o programname programname.c

** IO

stdio.h in C contains numerous IO routines.

You use it primarily for printf and scanf.

** Streams

Programs that run in the UNIX terminal have 3 main streams:

- stdin 
  - standard in or standard input to read
  - shell: `<` `|`
  - C: `gets, getchar, scanf, fgets(stdin,...), read(stdin,...) , ...`
- stdout
  - standard out or standard output to write out to the terminals
  - shell: `>` `|`
  - C: `puts, printf, fputs(stdout,...), fputc(stdout,...), ...`
- stderr: 
  - standard err or standard error to write out to terminals but not
    modify the main output
  - `2>`  or `2>&1 |` or `|&` (bash only)
  - C: `fputs(stderr,...), fputchar(stderr,...), fprintf(stderr,...), ...`

They are called streams because you serially output information to
them. And multiple sources can write to the stream. It's like talking
or a stream of consciousness. 1 byte after another.

***** shell

Typically a terminal will mix stdout and stderr.

You can type in input to standard input.

You can "pipe" input to standard input: |

You can redirect file input to standard input: <

Example: using a pipe to pipe the string `ALL CAPS` through the tr
program to lower case it.

#+begin_src sh :exports both
echo ALL CAPS | tr '[:upper:]' '[:lower:]'
#+end_src

#+RESULTS:
: all caps

tr is a translation program it takes characters from 1 argument and
turns them into another.

#+begin_src sh :exports both
echo ALL CAPS | tr 'ALC' 'ODP'
#+end_src

#+RESULTS:
: ODD POPS

We can make files by redirecting stdout to a file
#+begin_src sh :exports both
echo ALL CAPS > allcaps.txt
cat allcaps.txt | tr 'AL' 'OP'
echo From Ontario, catch those # just echo to stdout
tr 'AC' 'IR' < allcaps.txt
#+end_src

#+RESULTS:
: OPP COPS
: From Ontario, catch those
: ILL RIPS

We can filter arbitrary commands:

#+begin_src sh :exports both
ls | tr '[:lower:]' '[:upper:]'
#+end_src

#+RESULTS:
: ALLCAPS.TXT
: AUTO
: PRESENTATION.ORG
: PRESENTATION.ORG~

We can chain pipes:
#+begin_src sh :exports both
echo translate AC IR LL LK
tr 'AC' 'IR' < allcaps.txt | sed -e 's/LL/LK/'
echo translate AC IR LL LK ^S
tr 'AC' 'IR' < allcaps.txt | sed -e 's/LL/LK/' | \
   sed -e 's/^/S/'
# we can chain commands together
echo translate AC IR LL LK ^S K K T
tr 'AC' 'IR' < allcaps.txt | sed -e 's/LL/LK/' | \
   sed -e 's/^/S/' | \
   sed -e 's/K /K T/'
ls | grep .org | sort
#+end_src

#+RESULTS:
: AC IR LL LK
: ILK RIPS
: AC IR LL LK ^S
: SILK RIPS
: AC IR LL LK ^S K K T
: SILK TRIPS
: #presentation.org#
: presentation.org
: presentation.org~

sed is a useful regular expression program for manipulating text.

****** stderr & shell

#+begin_src sh :exports both
ls -l missing
exit 0
#+end_src

#+RESULTS:

Where is it?

#+begin_src sh :exports both
ls -l missing 2>&1
exit 0
#+end_src

#+RESULTS:
: ls: cannot access 'missing': No such file or directory

Once we redirect stderr to stdout we can pipe it and manipulate it!

#+begin_src sh :exports both
ls -l missing 2>&1 | tr '[:lower:]' '[:upper:]'
#+end_src

#+RESULTS:
: LS: CANNOT ACCESS 'MISSING': NO SUCH FILE OR DIRECTORY

Or perhaps we don't want to see the error

#+begin_src sh :exports both
ls -l missing 2> /dev/null
exit 0
#+end_src

#+RESULTS:

Maybe we just want stderr
#+begin_src sh :exports both
ls -l *.org missing 2>&1 > /dev/null
exit 0
#+end_src

#+RESULTS:
: ls: cannot access 'missing': No such file or directory

Maybe we just want BOTH
#+begin_src sh :exports both
ls -l *.org missing 2>&1
exit 0
#+end_src

#+RESULTS:
: ls: cannot access 'missing': No such file or directory
: -rw-r--r-- 1 hindle1 hindle1 6341 Apr  6 20:35 presentation.org

***** C
****** output
#+begin_src C :exports both :tangle stdout-example.c
#include <stdio.h>
int main() {
    printf("OK this is to stdout!\n");
    fprintf(stdout,"OK this is to stdout as well!\n");
    fprintf(stderr,"OK this is to stderr!\n");
    return 0;
}
#+end_src

#+RESULTS:
: OK this is to stdout!
: OK this is to stdout as well!

Hmmm org-mode ignores stderr

#+begin_src shell :exports both
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o stdout-example stdout-example.c
./stdout-example 2>&1
#+end_src

#+RESULTS:
: OK this is to stderr!
: OK this is to stdout!
: OK this is to stdout as well!

Ah now it appears


****** input
#+begin_src C :eval no :exports both :tangle stdin-example.c
#include <stdio.h>
int main() {
    int input;
    if (scanf("%d", &input)!=1) abort();
    fprintf(stdout, "From stdin %d\n", input);
    fprintf(stderr, "ERR: From stdin %d\n", input);
    return 0;
}
#+end_src

#+begin_src shell :exports both
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o stdin-example stdin-example.c
echo 10 | ./stdin-example 2>&1
echo 20 > 20.txt
echo 30 > 30.txt
./stdin-example 2>&1 < 20.txt
./stdin-example < 30.txt 2>&1
#+end_src

#+RESULTS:
: ERR: From stdin 10
: From stdin 10
: ERR: From stdin 20
: From stdin 20
: ERR: From stdin 30
: From stdin 30

You've mostly seen this before except the `fprintf(stderr,...)` part.

** Files

Files can be addressed as streams as well. But we have to open and
close them. So we can treat files exactly like stdin and stdout but
with a few changes.

1. We need a file handle (like stdin, stdout, or stderr). This handle
   is for the OS to know which file the process is talking about.
2. We need to decide if we are reading write or both and we need to
   open a file to produce a file handle. Or use an existing one.
   - fopen
3. We need to write to it using write and f* operations.
   - fprintf
   - fputs   
3. We need to read from it using read and f* operations.
   - fgets
   - fgetc   
4. We need to close the file after we're done. fclose.

*** open and close

To open a file we use fopen. To close it we fclose. Don't use open and
close because that's not portable. That's for the OS.

#+begin_src C :eval no
FILE *fopen(const char *pathname, const char *mode);
int fclose(FILE *stream);
#+end_src

The mode is a string
- "r" - read
- "w" - write (erase file)
- "a" - append (add to end of file)
- "r+" - read and write
- "w+" - write and read (erase file)
- "a+" - append and read

#+begin_src C :eval no
FILE * f_cb = fopen("coolbears.txt", "w"); // open coolbears.txt for writing
int fclose(f_cb); // close coolbears.txt
#+end_src

If you don't close a file you can lose bytes you wrote to it because
they didn't get flushed to disk. This is important because people
might kill your program your you might reboot or shutdown the
computer. If you want to ensure data is written try to engage in
flush. Sometimes no data will appear until you flush or close the
file. Keep those pipes clean.

**** fopen

#+begin_src C :exports both
#include <stdio.h>
#define SIZE 1024
int main() {
    char buffer[SIZE] = {'\0'};
    // open coolbears.txt for writing
    FILE * f_cb  = fopen("coolbears.txt", "w"); 
    if (f_cb == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fputs("Polar bears", f_cb);
    fclose(f_cb);
    FILE * f_cbr = fopen("coolbears.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fgets(buffer, SIZE, f_cbr);
    printf("%s\n",buffer);
    fclose(f_cbr);
}
#+end_src

#+RESULTS:
: Polar bears

**** perror

perror produces nice errors.

perror("An error string"); will report the immediate fopen error if
there is one.

Copy this code or put it in macro.
#+begin_src C :eval no
FILE * file = fopen("filename", "w"); // open coolbears.txt for writing
if (file == NULL) {
    perror("filename could not be opened");
    abort();
}
#+end_src


#+begin_src C :exports both :tangle perror.c
#include <stdio.h>
int main() {
    // open a file I can't open
    FILE * f_cb  = fopen("/proc/whatever", "w"); 
    if (f_cb == NULL) {
        perror("Couldn't open /proc/whatever");
        abort();
    }
    printf("We shouldn't be here!\n");
}
#+end_src

#+RESULTS:

#+begin_src sh :exports both
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o perror ./perror.c && \
./perror 2>&1 
exit 0
#+end_src

#+RESULTS:
: Couldn't open /proc/whatever: No such file or directory
: Aborted (core dumped)

**** closing

OK but what if we don't close it?

#+begin_src C :exports both
#include <stdio.h>
#define SIZE 1024
int main() {
    char buffer[SIZE] = {'\0'};
    // open coolbears.txt for writing
    FILE * f_cb  = fopen("coolbears.txt", "w"); 
    if (f_cb == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fputs("Polar bears", f_cb);
    FILE * f_cbr = fopen("coolbears.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fgets(buffer, SIZE, f_cbr);
    printf("This is the buffer before close: %s\n",buffer);
    fclose(f_cbr);
    fclose(f_cb);
    f_cbr = fopen("coolbears.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fgets(buffer, SIZE, f_cbr);
    printf("This is the buffer after close: %s\n",buffer);
    fclose(f_cbr);
    printf("Close your buffers!");
}
#+end_src

#+RESULTS:
: This is the buffer before close: 
: This is the buffer after close: Polar bears
: Close your buffers!

#+begin_src sh :exports both
cat coolbears.txt
#+end_src

#+RESULTS:
: Polar bears

****** fflushing and fclose

Now let's see what flush does for us!
#+begin_src C :exports both
#include <stdio.h>
#define SIZE 1024
int main() {
    char buffer[SIZE] = {'\0'};
    // open coolbears.txt for writing
    FILE * f_cb  = fopen("coolbears.txt", "w"); 
    if (f_cb == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fputs("Polar bears", f_cb);
    fflush(f_cb); // WE'RE FLUSHING!
    FILE * f_cbr = fopen("coolbears.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fgets(buffer, SIZE, f_cbr);
    printf("This is the buffer before close but after flush: %s\n",buffer);
    fclose(f_cbr);
    fclose(f_cb);
    f_cbr = fopen("coolbears.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open coolbears.txt");
        abort();
    }
    fgets(buffer, SIZE, f_cbr);
    printf("This is the buffer after close: %s\n",buffer);
    fclose(f_cbr);
    printf("Close your buffers! Keep your pipes clean");
}
#+end_src

#+RESULTS:
: This is the buffer before close but after flush: Polar bears
: This is the buffer after close: Polar bears
: Close your buffers! Keep your pipes clean

*** writing
**** fprintf

fprintf is printf for files. It takes a FILE * as the first argument
and then it looks like printf after that.

fputs is available too and does the same thing except no laying out of
strings.

#+begin_src C :exports both
#include <stdio.h>
#include <stdlib.h>
#define SIZE 1024
int main() {
    srand(time(NULL));
    char buffer[SIZE] = {'\0'};
    // open coolbears.txt for writing
    FILE * f_cb  = fopen("fprintf.txt", "w"); 
    if (f_cb == NULL) {
        perror("Couldn't open fprintf.txt");
        abort();
    }
    // It's just like printf!
    fprintf(f_cb,"A random number %d\n", rand());
    fclose(f_cb);
    FILE * f_cbr = fopen("fprintf.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open fprintf.txt");
        abort();
    }
    fgets(buffer, SIZE, f_cbr);
    printf("%s\n",buffer);
    fclose(f_cbr);
}
#+end_src

#+RESULTS:
: A random number 1199792083

*** reading

For reading text from a file you options like fgets, fgetc, and
fscanf.

**** fscanf

fscanf looks and feels like scanf except it outputs to FILE * streams.
The first argument is a FILE *.

#+begin_src C :exports both
#include <stdio.h>
#include <stdlib.h>
#define SIZE 1024
#define CHECK(x) ((x)==1)?1:(abort(),0);
int main() {
    srand(time(NULL));
    char buffer[SIZE] = {'\0'};
    // open coolbears.txt for writing
    FILE * f_cb  = fopen("fprintf.txt", "w"); 
    if (f_cb == NULL) {
        perror("Couldn't open fprintf.txt");
        abort();
    }
    // It's just like printf!
    fprintf(f_cb,"A random number %d\n", rand());
    fclose(f_cb);
    FILE * f_cbr = fopen("fprintf.txt", "r"); 
    if (f_cbr == NULL) {
        perror("Couldn't open fprintf.txt");
        abort();
    }

    for (int i = 0 ; i < 3; i++) {
        CHECK(fscanf(f_cbr, "%s",buffer));
        printf("%s\n",buffer);
    }
    int input=0;
    CHECK(fscanf(f_cbr, "%d",&input));
    printf("%d\n", input);
    fclose(f_cbr);
    return 0;
}
#+end_src

#+RESULTS:
: A
: random
: number
: 632306008

**** fgets

fgets gets a little complicated because you have to test for EOF. You
can check for an null response and use the feof function, but probably
you have to do both. If you find you're repeating the last line of a
file it is because you are reading nothing and you're reusing the
buffer you just used.

#+begin_src C :exports both
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 1024
#define N 8
int main() {
    char buffer[SIZE] = {'\0'};
    srand(time(NULL));
    // open coolbears.txt for writing
    FILE * filew  = fopen("fgets.txt", "w"); 
    if (filew == NULL) {
        perror("Couldn't open fgets.txt");
        abort();
    }

    // It's just like printf!
    const int totalLines = 1 + (rand() % N);
    for (int i = 0 ; i < totalLines; i++) {
        fprintf(filew,"A random number %d\n", rand());
    }
    fclose(filew);
    FILE * filer = fopen("fgets.txt", "r"); 
    if (filer == NULL) {
        perror("Couldn't open fgets.txt");
        abort();
    }

    while(!feof(filer)) {
        if (fgets(buffer, SIZE, filer)) {
           printf("fgets.txt: %s", buffer);
        }
    }
    fclose(filer);
    return 0;
}
#+end_src

#+RESULTS:
: fgets.txt: A random number 1410636209
: fgets.txt: A random number 572897036
: fgets.txt: A random number 46628646
: fgets.txt: A random number 7050258
: fgets.txt: A random number 1873294443
: fgets.txt: A random number 2061715624
: fgets.txt: A random number 614071061

*** flushing

If you want to ensure something gets to a file or a term you should
flush. Typically I/O is BUFFERED. Buffered means it is flushed once a
certain threshold is met, typically size but sometimes time (depending
on the system). Buffered will increase latency to print something but
will often improve overall bandwidth to disk.

#+begin_src C :eval no :exports code
fflush(FILE * stream); // will flush your stream
#+end_src

Flush when you need to.

#+begin_src C :exports code :eval no :tangle fflushrandr.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#define SIZE 5
int main() {
    srand(time(NULL));
    FILE * file = fopen("fflush.txt", "w"); 
    if (file == NULL) {
        perror("Couldn't open fflush.txt");
        abort();
    }
    for (int i = 0 ; i < SIZE; i++) {
        fprintf(file, "%d\n", rand());
        fflush(file); // WE'RE FLUSHING!
        sleep(1);
    }
    fclose(file);
}
#+end_src

#+begin_src C :exports code :eval no :tangle fflushreader.c
#include <time.h>
#include <stdio.h>
#include <unistd.h>
#define SIZE 20
#define BUFF 1024
int main() {
    char buffer[BUFF];
    FILE * file = fopen("fflush.txt", "r"); 
    if (file == NULL) {
        perror("Couldn't open fflush.txt");
        abort();
    }
    while(!feof(file)) {
        if (!fgets(buffer,BUFF,file)) {
            break;
        }
        printf("%s", buffer);
        sleep(1);
    }
    fclose(file);
}
#+end_src

#+begin_src sh :exports both
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o fflushrandr fflushrandr.c && \
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o fflushreader fflushreader.c && \
echo This will take 7 seconds && \
( ./fflushrandr & sleep 2; ./fflushreader)
#+end_src

#+RESULTS:
: This will take 7 seconds
: 413493830
: 851365006
: 290153846
: 1232904670
: 705823962
*** Binary Files

From stdio.h:
#+begin_src C :exports code :eval no
       size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

       size_t fwrite(const void *ptr, size_t size, size_t nmemb,
                     FILE *stream);
#+end_src

fread and fwrite will write memory to a stream and back again. Any
pointer can be used, the bytes in memory will be serialized in and
out. It will not be compiler and architecture portable so carefully
craft your structs before you write them out. Use explicit padding.
For 64-bit and 32-bit compatibility pad to modulus 8 bytes.

**** Writing Binary Files

fwrite is our buddy. It will help us write arbitrary sections of
memory to a file.

#+begin_src C :exports both :eval yes :tangle binarywrite.c
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 5
struct demo {
    int i;
    float f;
    double d;
    char c;
};
int main() {
    srand(time(NULL));
    FILE * file = fopen("binary.bin", "w"); 
    if (file == NULL) {
        perror("Couldn't open binary.bin");
        abort();
    }

    int realSize = 1 + (rand() % SIZE);
    assert(1==fwrite(&realSize, sizeof(int), 1, file));
    for (int i = 0 ; i < realSize; i++) {
        struct demo randd;
        randd.i = rand();
        randd.f = rand() / 2.0F;
        randd.d = 1.0 / (rand()+1.0);
        randd.c = 'X';
        printf("Writing %d\n", randd.i);
        printf("\tWriting %g\n", randd.f);
        printf("\tWriting %g\n", randd.d);
        printf("\tWriting %c\n", randd.c);
        assert(1==fwrite(&randd, sizeof(randd), 1, file));
    }
    fclose(file);
}
#+end_src

#+RESULTS:
#+begin_example
Writing 1261796412
	Writing 4.90154e+08
	Writing 6.05296e-10
	Writing X
Writing 1515345272
	Writing 3.19668e+08
	Writing 1.36133e-09
	Writing X
Writing 1764304537
	Writing 1.52156e+08
	Writing 5.48835e-10
	Writing X
Writing 243855245
	Writing 1.08255e+08
	Writing 1.31258e-09
	Writing X
#+end_example

So those structs are written to binary.bin

When you write out structs, watch for padding. Look for the letter X.
Count the number of bytes after the last X.

#+begin_src sh :exports both
hexdump -C binary.bin
#+end_src

#+RESULTS:
: 00000000  10 00 00 00 ff ff ff ff  b7 b4 4e 4e 4f 29 34 8b  |..........NNO)4.|
: 00000010  6a 06 15 3e 58 3c 9a a2  6b 55 00 00 15 8b b9 7a  |j..>X<..kU.....z|
: 00000020  ac 15 02 4e 79 b6 42 70  62 a6 04 3e 58 3c 9a a2  |...Ny.Bpb..>X<..|
: 00000030  6b 55 00 00 78 f6 53 02  6b 70 ff 4d 15 1f 9b 84  |kU..x.S.kp.M....|
: 00000040  75 e2 0f 3e 58 3c 9a a2  6b 55 00 00 ff ff ff ff  |u..>X<..kU......|
: 00000050  c8 a1 eb 4c 77 e7 a7 5f  f3 e4 46 3e 58 3c 9a a2  |...Lw.._..F>X<..|
: 00000060  6b 55 00 00                                       |kU..|
: 00000064

**** Reading binary

Reading binary requires that you know what types you are reading. Be
warned that if you mix different types you need to read them in proper
order.

#+begin_src C :exports both :eval yes :tangle binaryread.c
  #include <assert.h>
  #include <time.h>
  #include <stdio.h>
  #define BUFF 1024
  struct demo {
      int i;
      float f;
      double d;
      char c;
  };
  int main() {
      char buffer[BUFF];
      FILE * file = fopen("binary.bin", "r"); 
      if (file == NULL) {
          perror("Couldn't open binary.bin");
          abort();
      }
      int size=0;
      assert(1==fread(&size, sizeof(size), 1, file));
      // we'll just ignore the size and just keep reading until we have
      // to stop.
      while(!feof(file)) {
          struct demo readDemo;
          if (1!=fread(&readDemo, sizeof(readDemo), 1, file)) {
             break;
          }
          printf("Reading %d\n", readDemo.i);
          printf("\tReading %f\n", readDemo.f);
          printf("\tReading %g\n", readDemo.d);
          printf("\tReading %c\n", readDemo.c);
      }
      fclose(file);
  }
#+end_src

#+RESULTS:
#+begin_example
Reading -1
	Reading 866987456.000000
	Reading 1.22382e-09
	Reading X
Reading 2058980117
	Reading 545614592.000000
	Reading 6.00992e-10
	Reading X
Reading 39057016
	Reading 535694688.000000
	Reading 9.27964e-10
	Reading X
Reading -1
	Reading 123539008.000000
	Reading 1.0661e-08
	Reading X
#+end_example

** Command line arguments

How do I make program like?

#+begin_src sh :exports code :eval no
./argv some commandline args -l
#+end_src

To get arguments from the commandline you can add the parameters:
- `int argc` -- number of commandline arguments
- `char ** argv` -- array of strings of commandline arguments

#+begin_src C :exports both :tangle argv.c
#include <stdio.h>

int main(int argc, char ** argv) {
    for (int i = 0 ; i < argc; i++) {
        printf("arg %d: %s\t", i, argv[i]);
    }
    puts("");
}
#+end_src

#+RESULTS:
: arg 0: /tmp/babel-7888jxN/C-bin-7888FYP

#+begin_src sh :exports both
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o argv argv.c && \
./argv &&  \
./argv 1  && \
./argv 1 2 && \
./argv 1 2 3 && \
cp -f argv argv-new && \
./argv-new 1 2 3 
#+end_src

#+RESULTS:
: arg 0: ./argv	
: arg 0: ./argv	arg 1: 1	
: arg 0: ./argv	arg 1: 1	arg 2: 2	
: arg 0: ./argv	arg 1: 1	arg 2: 2	arg 3: 3	
: arg 0: ./argv-new	arg 1: 1	arg 2: 2	arg 3: 3	


*** atoi for integer arguments

So atoi is your friend :)

#+begin_src C :exports both :eval no :tangle argvrand.c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char ** argv) {
    if (argc != 2) { exit(1); }
    int n = atoi(argv[1]);
    for (int i = 0 ; i < n; i++) {
        printf("%d\t", rand());
    }
    printf("\n");
}
#+end_src

#+RESULTS:

#+begin_src sh :exports both
gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
     -o argvrand argvrand.c && \
(./argvrand || echo not enough args: $?) && \
./argvrand 1 && \
./argvrand 2 && \
./argvrand 3 && \
./argvrand 0 
#+end_src

#+RESULTS:
: not enough args: 1
: 1804289383	
: 1804289383	846930886	
: 1804289383	846930886	1681692777	
: 


** mmap()

mmap is neat, it maps memory to and from a file or even another
process. We do this with shared libraries too. So you can read and
write to a file just by writing to memory. The OS deals with it very
effeciently you just have to be very size aware. mmapping files is not
good for streams and stream processing, it gets complicated. It is
good for fixed sized structs.

#+begin_src C :exports both :eval yes :tangle mmapread.c
#include <assert.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 2
struct demo {
    int i;
    float f;
    double d;
    char c;
    // char cc[7]; // you can make padding explicit
};
int main() {
    srand(time(NULL));
    FILE * file = fopen("binary.bin", "r+"); 
    if (file == NULL) {
        perror("Couldn't open binary.bin");
        abort();
    }
    int fd = fileno(file);
    int rsize = 0;
    assert(1==fread(&rsize, sizeof(rsize), 1, file));
    const size_t size = sizeof(int) + sizeof(struct demo) * rsize;
    printf("N %d struct demos are in binary.bin\n", rsize);
    const size_t new_size = size + sizeof(struct demo);
    // if you want to increase a file's size use ftruncate 
    // before you do this
    ftruncate(fd, new_size); 
    printf("mmapping %u bytes of memory from the file\n", new_size);
    int * mapped = mmap(0, 
        new_size,
        PROT_READ | PROT_WRITE, 
        MAP_SHARED, 
        fd, 
        0);
    if (mapped == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }
    // read 4 bytes from the head
    assert(rsize == (int)*mapped);
    // really abusive but we're 1 int after the start eh
    struct demo * demos = (struct demo *)(mapped+1);
    // OK now look for the read ?
    for (int i = 0 ; i < rsize; i++) {
        struct demo randd = demos[i];
        printf("Reading %d\n", randd.i);
        printf("\tReading %g\n", randd.f);
        printf("\tReading %g\n", randd.d);
        printf("\tReading %c\n", randd.c);
    }
    // demo we can write a -1
    // run the program twice and your first integer is -1
    demos[0].i = -1;
    // now let's extend the file by 1 record!
    demos[rsize] = demos[rsize-1];
    mapped[0] = rsize+1;
    munmap(demos, size);
    fclose(file);
}
#+end_src

#+RESULTS:
#+begin_example
N 6 struct demos are in binary.bin
mmapping 172 bytes of memory from the file
Reading -1
	Reading 4.90154e+08
	Reading 6.05296e-10
	Reading X
Reading 1515345272
	Reading 3.19668e+08
	Reading 1.36133e-09
	Reading X
Reading 1764304537
	Reading 1.52156e+08
	Reading 5.48835e-10
	Reading X
Reading 243855245
	Reading 1.08255e+08
	Reading 1.31258e-09
	Reading X
Reading 243855245
	Reading 1.08255e+08
	Reading 1.31258e-09
	Reading X
Reading 243855245
	Reading 1.08255e+08
	Reading 1.31258e-09
	Reading X
#+end_example

#+begin_src sh :eval yes :exports both
ls -l binary.bin
#+end_src

#+RESULTS:
: -rw-rw-r-- 1 hindle1 hindle1 172 Apr  7 11:17 binary.bin

If you want to see some bad code that's small and uses mmap checkout:

https://github.com/abramhindle/a-simple-pseudo-bayesian-spam-filter/blob/master/filter.c

** References

KN King, C Programming, Chapter 28, 2nd Edition

Hazel Cambell's thorough notes on Stream I/O:
https://docs.google.com/document/d/1b48EzfP03JYEFt42wCajU5kv76oVbTxEXa2JO0q17ag/edit
